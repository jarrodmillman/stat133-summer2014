<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stat 133 (summer 2014)</title><link href="http://www.jarrodmillman.com/stat133-summer2014/" rel="alternate"></link><link href="http://www.jarrodmillman.com/stat133-summer2014/feeds/misc.atom.xml" rel="self"></link><id>http://www.jarrodmillman.com/stat133-summer2014/</id><updated>2014-06-25T00:00:00-07:00</updated><entry><title>Section Notes - 4</title><link href="http://www.jarrodmillman.com/stat133-summer2014/notes4.html" rel="alternate"></link><updated>2014-06-25T00:00:00-07:00</updated><author><name>Karl Kumbier</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-25:notes4.html</id><summary type="html">&lt;h1&gt;Apply functions in R&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;'s &lt;code&gt;apply&lt;/code&gt; functions are the efficient way to perform repeated
operations on vectors of your data. There are many variants of the "apply"
statement as well as wrappers for special cases of these
functions easier. These notes will cover the &lt;code&gt;apply&lt;/code&gt; statements and
wrappers that are most commonly used in data analysis. Much of what we discuss
here carries over to other &lt;code&gt;apply&lt;/code&gt; statements as well.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The first function we'll look at is &lt;code&gt;apply&lt;/code&gt;. This function applies a given
function to each element of a data structure with defined dimension
(i.e. matrices, arrays, data frames). The elements that &lt;code&gt;apply&lt;/code&gt; operates on are
the rows/columns of matrices and data frames (or the sub-matrices of arrays). In
other words, if you want to apply some function to the rows or columns of your
data, you should use the &lt;code&gt;apply&lt;/code&gt; function. When you call &lt;code&gt;apply&lt;/code&gt;, you must
supply the function with the object you want to operate on (&lt;code&gt;X&lt;/code&gt;), the dimension(s)
you would like to apply the function over (&lt;code&gt;MARGIN&lt;/code&gt;), and the function you would
like to perform (&lt;code&gt;FUN&lt;/code&gt;). There are a few things to note about these arguments
before proceeding to our examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt; must have positive dimension. You can easily check this by running
dim(&lt;code&gt;X&lt;/code&gt;). Note that vectors and lists do not satisfy this requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the &lt;code&gt;MARGIN&lt;/code&gt; argument, 1 indicates rows and 2 indicates columns. If you
are using higher dimensional arrays, integers that correspond to any of the
other dimensions are accepatable as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you may specify additional arguments to your function following the &lt;code&gt;FUN&lt;/code&gt;
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; will return the vector, matrix or list that results from applying &lt;code&gt;FUN&lt;/code&gt;
to each row or column as defined by &lt;code&gt;MARGIN&lt;/code&gt;. Whenever possible, &lt;code&gt;apply&lt;/code&gt; will
try to simplify the results of its return into a matrix or vector. If &lt;code&gt;FUN&lt;/code&gt;
returns objects with different lengths when applied to the various rows/columns,
the returned object will be a list. Lets look at a few examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sample.matrix &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class="p"&gt;(&lt;/span&gt;sample&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; ncol &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
sample.matrix
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##      [,1] [,2] [,3] [,4] [,5]&lt;/span&gt;
&lt;span class="c"&gt;## [1,]   15    8   12   10    2&lt;/span&gt;
&lt;span class="c"&gt;## [2,]    7   11    5    6   14&lt;/span&gt;
&lt;span class="c"&gt;## [3,]    3    4   13    1    9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# basic apply statements that calculate the mean of rows and columns&lt;/span&gt;
row.means &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;)&lt;/span&gt;
col.means &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;)&lt;/span&gt;
row.means
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 9.4 8.6 6.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;col.means
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  8.333  7.667 10.000  5.667  8.333&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# faster way to accomplish the same thing&lt;/span&gt;
row.means &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rowMeans&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;)&lt;/span&gt;
col.means &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; colMeans&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;)&lt;/span&gt;
row.means
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 9.4 8.6 6.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;col.means
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  8.333  7.667 10.000  5.667  8.333&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few of the functions that are frequently used by statisticians (&lt;code&gt;sum&lt;/code&gt;
and &lt;code&gt;mean&lt;/code&gt;) have slightly faster implementations of an &lt;code&gt;apply&lt;/code&gt; statment used to
do the same thing. However, using an &lt;code&gt;apply&lt;/code&gt; statement allows us to pass in
additional arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# you can pass in additional arguments after defining the function. Any&lt;/span&gt;
&lt;span class="c1"&gt;# arguments not passed in will use the function&amp;#39;s default value&lt;/span&gt;

row.means.trimmed &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;,&lt;/span&gt; trim &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
col.means.trimmed &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;,&lt;/span&gt; trim &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
row.means.trimmed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 10.000  8.000  5.333&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;col.means.trimmed
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  7  8 12  6  9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also define your own functions for the &lt;code&gt;FUN&lt;/code&gt; argument. User defined
functions will take the row or column as their argument depending on the value
you specified for &lt;code&gt;MARGIN&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;overall.mean &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; mean&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;)&lt;/span&gt;

row.value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;row&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;mean&lt;span class="p"&gt;(&lt;/span&gt;row&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; overall.mean&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;sd&lt;span class="p"&gt;(&lt;/span&gt;row&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;value&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

col.value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;sample.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;col&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;mean&lt;span class="p"&gt;(&lt;/span&gt;col&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; overall.mean&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;sd&lt;span class="p"&gt;(&lt;/span&gt;col&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;value&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

row.value
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  0.2870  0.1587 -0.4082&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;col.value
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  0.05455 -0.09492  0.45883 -0.51745  0.05530&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we mentioned, when our functions return objects of varying lengths &lt;code&gt;apply&lt;/code&gt;
will return a list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;param.matrix &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; matrix&lt;span class="p"&gt;(&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; ncol &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
param.matrix
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##      [,1] [,2]&lt;/span&gt;
&lt;span class="c"&gt;## [1,]    5    0&lt;/span&gt;
&lt;span class="c"&gt;## [2,]   10    5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# generate a list of length with 5 samples of mean 0 normal variables and 10&lt;/span&gt;
&lt;span class="c1"&gt;# samples of mean 5 variables&lt;/span&gt;
apply&lt;span class="p"&gt;(&lt;/span&gt;param.matrix&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;row&lt;span class="p"&gt;)&lt;/span&gt; rnorm&lt;span class="p"&gt;(&lt;/span&gt;row&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; row&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [[1]]&lt;/span&gt;
&lt;span class="c"&gt;## [1] -0.2734  0.2565  1.0476  2.1080  0.1782&lt;/span&gt;
&lt;span class="c"&gt;## &lt;/span&gt;
&lt;span class="c"&gt;## [[2]]&lt;/span&gt;
&lt;span class="c"&gt;##  [1] 5.059 3.139 6.402 6.015 4.699 5.704 4.677 5.341 5.737 4.789&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;&lt;code&gt;sapply&lt;/code&gt; (&lt;code&gt;lapply&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;The next functions that we will look at are similar to &lt;code&gt;apply&lt;/code&gt; in that they
are used to loop over a data structure and apply some function to the elements
of that data structure. Unlike &lt;code&gt;apply&lt;/code&gt;, they operate on data structures with
undefined dimension (i.e. lists and vectors). These functions are &lt;code&gt;sapply&lt;/code&gt; and
&lt;code&gt;lapply&lt;/code&gt;. Actually, &lt;code&gt;sapply&lt;/code&gt; is just a wrapper for &lt;code&gt;lapply&lt;/code&gt; that tries to
simplify the returned value into a vector or matrix where possible. We use
&lt;code&gt;sapply&lt;/code&gt; in our examples with the knowledge that if we wanted to return a list
we could use &lt;code&gt;lapply&lt;/code&gt; instead. When you call &lt;code&gt;sapply&lt;/code&gt; (or &lt;code&gt;lapply&lt;/code&gt;) you need to
supply it with the data structure that will get looped over (&lt;code&gt;X&lt;/code&gt;) and a function
to apply to each element of that data structure (&lt;code&gt;FUN&lt;/code&gt;). There are a few things
to note&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;code&gt;sapply&lt;/code&gt; on a data frame will perform &lt;code&gt;FUN&lt;/code&gt; on each of the vectors in
  that comprise it (remember data frames are just lists of vectors of equal
  length).&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;sapply&lt;/code&gt; on a matrix or array will coerce the object into a list and
  then apply &lt;code&gt;FUN&lt;/code&gt; to the individual elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sample.list &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; list&lt;span class="p"&gt;(&lt;/span&gt;samp1 &lt;span class="o"&gt;=&lt;/span&gt; rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; samp2 &lt;span class="o"&gt;=&lt;/span&gt; rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; samp3 &lt;span class="o"&gt;=&lt;/span&gt; rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# The objects we call sapply on don&amp;#39;t have defined dimension so we don&amp;#39;t&lt;/span&gt;
&lt;span class="c1"&gt;# need a MARGIN argument. Other than that the function calls are similar&lt;/span&gt;

sapply&lt;span class="p"&gt;(&lt;/span&gt;sample.list&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   samp1   samp2   samp3 &lt;/span&gt;
&lt;span class="c"&gt;## -0.4709  4.4661 10.5416&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;sapply&lt;span class="p"&gt;(&lt;/span&gt;sample.list&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;,&lt;/span&gt; trim &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   samp1   samp2   samp3 &lt;/span&gt;
&lt;span class="c"&gt;## -0.3927  4.4029 10.6850&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;sapply&lt;span class="p"&gt;(&lt;/span&gt;sample.list&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;list.element&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; mean&lt;span class="p"&gt;(&lt;/span&gt;list.element&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;sd&lt;span class="p"&gt;(&lt;/span&gt;list.element&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   samp1   samp2   samp3 &lt;/span&gt;
&lt;span class="c"&gt;## -0.3283  9.3778  9.5501&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we call &lt;code&gt;sapply&lt;/code&gt; (or &lt;code&gt;lapply&lt;/code&gt;) on a data frame it acts on the vectors that
make up the data frame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# built in R dataset on regional levels of different socioeconomic&lt;/span&gt;
&lt;span class="c1"&gt;# indicators in Switzerland&lt;/span&gt;
head&lt;span class="p"&gt;(&lt;/span&gt;swiss&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##              Fertility Agriculture Examination Education Catholic&lt;/span&gt;
&lt;span class="c"&gt;## Courtelary        80.2        17.0          15        12     9.96&lt;/span&gt;
&lt;span class="c"&gt;## Delemont          83.1        45.1           6         9    84.84&lt;/span&gt;
&lt;span class="c"&gt;## Franches-Mnt      92.5        39.7           5         5    93.40&lt;/span&gt;
&lt;span class="c"&gt;## Moutier           85.8        36.5          12         7    33.77&lt;/span&gt;
&lt;span class="c"&gt;## Neuveville        76.9        43.5          17        15     5.16&lt;/span&gt;
&lt;span class="c"&gt;## Porrentruy        76.1        35.3           9         7    90.57&lt;/span&gt;
&lt;span class="c"&gt;##              Infant.Mortality&lt;/span&gt;
&lt;span class="c"&gt;## Courtelary               22.2&lt;/span&gt;
&lt;span class="c"&gt;## Delemont                 22.2&lt;/span&gt;
&lt;span class="c"&gt;## Franches-Mnt             20.2&lt;/span&gt;
&lt;span class="c"&gt;## Moutier                  20.3&lt;/span&gt;
&lt;span class="c"&gt;## Neuveville               20.6&lt;/span&gt;
&lt;span class="c"&gt;## Porrentruy               26.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;swiss.subset &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; swiss&lt;span class="p"&gt;[,&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fertility&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Agriculture&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Education&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Infant.Mortality&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# lets look the mean and standard deviation of each of the variables&lt;/span&gt;
sapply&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##        Fertility      Agriculture        Education Infant.Mortality &lt;/span&gt;
&lt;span class="c"&gt;##            70.14            50.66            10.98            19.94&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;sapply&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;,&lt;/span&gt; sd&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##        Fertility      Agriculture        Education Infant.Mortality &lt;/span&gt;
&lt;span class="c"&gt;##           12.492           22.711            9.615            2.913&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# we can even plot histograms of the data by variable&lt;/span&gt;
par&lt;span class="p"&gt;(&lt;/span&gt;mfrow &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# this is a nice function to put multiple plots on one page&lt;/span&gt;
sapply&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;,&lt;/span&gt; hist&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="plot of chunk unnamed-chunk-6" src="figure/unnamed-chunk-6.png" /&gt; &lt;/p&gt;
&lt;p&gt;Unfortunately, the names for the histograms aren't particularly helpful. You
could try to adjust this by supplying additional arguments to the hist function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var.names &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; names&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;)&lt;/span&gt;
var.names
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;Fertility&amp;quot;        &amp;quot;Agriculture&amp;quot;      &amp;quot;Education&amp;quot;       &lt;/span&gt;
&lt;span class="c"&gt;## [4] &amp;quot;Infant.Mortality&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;par&lt;span class="p"&gt;(&lt;/span&gt;mfrow &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
sapply&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;,&lt;/span&gt; hist&lt;span class="p"&gt;,&lt;/span&gt; xlab &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;observed value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; main &lt;span class="o"&gt;=&lt;/span&gt; var.names&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="plot of chunk unnamed-chunk-7" src="figure/unnamed-chunk-7.png" /&gt; &lt;/p&gt;
&lt;p&gt;Instead of labeling each plotwith the correct variable name, R prints every
string in &lt;code&gt;var.names&lt;/code&gt; for each plot. Not exactly what we were looking for. This
is because the functions we apply to the elements of our data structure are
constant. In other words, the only inputs to &lt;code&gt;FUN&lt;/code&gt; that change are the elements
of our data structure. Thankfully, R provides the function &lt;code&gt;mapply&lt;/code&gt; to help us
get around this.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;mapply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;mapply&lt;/code&gt; function works much like &lt;code&gt;sapply&lt;/code&gt; or &lt;code&gt;lapply&lt;/code&gt;. With &lt;code&gt;mapply&lt;/code&gt;
though, our functions are not limited to a single varying argument. The call for
&lt;code&gt;mapply&lt;/code&gt; is a little different from the other apply functions. We first need to
specify our function then we provide the data structure that the function
operates on. Our histogram example would look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var.names &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; names&lt;span class="p"&gt;(&lt;/span&gt;swiss.subset&lt;span class="p"&gt;)&lt;/span&gt;
par&lt;span class="p"&gt;(&lt;/span&gt;mfrow &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
mapply&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;variable&lt;span class="p"&gt;,&lt;/span&gt; var.name&lt;span class="p"&gt;)&lt;/span&gt; hist&lt;span class="p"&gt;(&lt;/span&gt;variable&lt;span class="p"&gt;,&lt;/span&gt; main &lt;span class="o"&gt;=&lt;/span&gt; var.name&lt;span class="p"&gt;,&lt;/span&gt; xlab &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;observed value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    swiss.subset&lt;span class="p"&gt;,&lt;/span&gt; var.names&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="plot of chunk unnamed-chunk-8" src="figure/unnamed-chunk-8.png" /&gt; &lt;/p&gt;
&lt;p&gt;Notice that the order we provide the different variables at the end of our
&lt;code&gt;mapply&lt;/code&gt; statement needs to be the same as the order they are called in the
function. Further, &lt;code&gt;mapply&lt;/code&gt; is not restricted to only two variables. As long as
we make sure the orders correspond we may use as many variables as we like.&lt;/p&gt;
&lt;h2&gt;Apply wrappers: &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;replicate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Some apply function tasks are so common amongst R users that the language
includes wrappers for them. Chief among these are &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;replicate&lt;/code&gt;. &lt;code&gt;by&lt;/code&gt;
statements are useful when trying to run functions on various subsets of your
data. Consider the "mtcars" dataset that is built into R and suppose we wanted
to calculate the average mpg of a car by number of cylinders in the engine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;head&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb&lt;/span&gt;
&lt;span class="c"&gt;## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4&lt;/span&gt;
&lt;span class="c"&gt;## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4&lt;/span&gt;
&lt;span class="c"&gt;## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1&lt;/span&gt;
&lt;span class="c"&gt;## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1&lt;/span&gt;
&lt;span class="c"&gt;## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2&lt;/span&gt;
&lt;span class="c"&gt;## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# the arguments for a by statment are data, subset factor, function in that&lt;/span&gt;
&lt;span class="c1"&gt;# order&lt;/span&gt;
by&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="o"&gt;$&lt;/span&gt;mpg&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="o"&gt;$&lt;/span&gt;cyl&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## mtcars$cyl: 4&lt;/span&gt;
&lt;span class="c"&gt;## [1] 26.66&lt;/span&gt;
&lt;span class="c"&gt;## -------------------------------------------------------- &lt;/span&gt;
&lt;span class="c"&gt;## mtcars$cyl: 6&lt;/span&gt;
&lt;span class="c"&gt;## [1] 19.74&lt;/span&gt;
&lt;span class="c"&gt;## -------------------------------------------------------- &lt;/span&gt;
&lt;span class="c"&gt;## mtcars$cyl: 8&lt;/span&gt;
&lt;span class="c"&gt;## [1] 15.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# we can use sapply statement to look at the average of several variables by&lt;/span&gt;
&lt;span class="c1"&gt;# number of cylinders&lt;/span&gt;
sapply&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;[,&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;wt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;var&lt;span class="p"&gt;)&lt;/span&gt; by&lt;span class="p"&gt;(&lt;/span&gt;var&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="o"&gt;$&lt;/span&gt;cyl&lt;span class="p"&gt;,&lt;/span&gt; mean&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##     mpg     hp    wt&lt;/span&gt;
&lt;span class="c"&gt;## 4 26.66  82.64 2.286&lt;/span&gt;
&lt;span class="c"&gt;## 6 19.74 122.29 3.117&lt;/span&gt;
&lt;span class="c"&gt;## 8 15.10 209.21 3.999&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;replicate&lt;/code&gt; statements are useful for simulations and fairly simple to
implement. These statements produce a specified number of replicates of a given
statement. For instance, if we wanted to produce 10 simulations of sampling 25
random uniform variables&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;replicate&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; runif&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##            [,1]    [,2]    [,3]    [,4]    [,5]   [,6]    [,7]    [,8]&lt;/span&gt;
&lt;span class="c"&gt;##  [1,] 0.5748392 0.28749 0.00349 0.44652 0.13699 0.3699 0.51512 0.69841&lt;/span&gt;
&lt;span class="c"&gt;##  [2,] 0.0010590 0.93278 0.47812 0.87892 0.35814 0.3688 0.77206 0.40563&lt;/span&gt;
&lt;span class="c"&gt;##  [3,] 0.0001907 0.89475 0.87006 0.78308 0.70703 0.3261 0.42233 0.14024&lt;/span&gt;
&lt;span class="c"&gt;##  [4,] 0.3188565 0.47157 0.86951 0.13302 0.91671 0.2523 0.86594 0.86434&lt;/span&gt;
&lt;span class="c"&gt;##  [5,] 0.9853210 0.81585 0.45488 0.40766 0.90607 0.6450 0.47121 0.12542&lt;/span&gt;
&lt;span class="c"&gt;##  [6,] 0.7024356 0.90947 0.46666 0.53455 0.69911 0.2381 0.62024 0.94814&lt;/span&gt;
&lt;span class="c"&gt;##  [7,] 0.2249691 0.66061 0.70574 0.47489 0.73907 0.2238 0.55454 0.61841&lt;/span&gt;
&lt;span class="c"&gt;##  [8,] 0.1353921 0.20309 0.27294 0.05341 0.42293 0.9872 0.47972 0.49680&lt;/span&gt;
&lt;span class="c"&gt;##  [9,] 0.4470449 0.44555 0.24052 0.05491 0.08967 0.6046 0.17333 0.27853&lt;/span&gt;
&lt;span class="c"&gt;## [10,] 0.9385163 0.67798 0.95618 0.99885 0.45088 0.1313 0.97006 0.07001&lt;/span&gt;
&lt;span class="c"&gt;## [11,] 0.0982774 0.50816 0.56374 0.94642 0.49484 0.7884 0.77314 0.63851&lt;/span&gt;
&lt;span class="c"&gt;## [12,] 0.2711856 0.86542 0.54552 0.20941 0.12294 0.7534 0.63229 0.27112&lt;/span&gt;
&lt;span class="c"&gt;## [13,] 0.4084631 0.37047 0.48257 0.78127 0.80352 0.3549 0.08938 0.35646&lt;/span&gt;
&lt;span class="c"&gt;## [14,] 0.3299767 0.99052 0.89554 0.68312 0.74825 0.3454 0.71481 0.37773&lt;/span&gt;
&lt;span class="c"&gt;## [15,] 0.9147518 0.37893 0.17761 0.18310 0.35805 0.6820 0.26136 0.86034&lt;/span&gt;
&lt;span class="c"&gt;## [16,] 0.4389611 0.11486 0.20609 0.37435 0.74195 0.0718 0.76355 0.30815&lt;/span&gt;
&lt;span class="c"&gt;## [17,] 0.5641979 0.12247 0.86493 0.22845 0.53164 0.7486 0.23534 0.70235&lt;/span&gt;
&lt;span class="c"&gt;## [18,] 0.9340997 0.11293 0.68794 0.76306 0.68938 0.4741 0.77426 0.29306&lt;/span&gt;
&lt;span class="c"&gt;## [19,] 0.7925815 0.65003 0.09922 0.08144 0.46391 0.3626 0.91598 0.03533&lt;/span&gt;
&lt;span class="c"&gt;## [20,] 0.5656450 0.46962 0.49972 0.04007 0.04784 0.8274 0.50144 0.48898&lt;/span&gt;
&lt;span class="c"&gt;## [21,] 0.1160394 0.30752 0.92019 0.57434 0.68835 0.1342 0.18251 0.36334&lt;/span&gt;
&lt;span class="c"&gt;## [22,] 0.0960271 0.66276 0.14329 0.08054 0.98979 0.4877 0.93420 0.96727&lt;/span&gt;
&lt;span class="c"&gt;## [23,] 0.0618901 0.21379 0.27903 0.32398 0.71879 0.8374 0.35423 0.78674&lt;/span&gt;
&lt;span class="c"&gt;## [24,] 0.3905563 0.66687 0.95751 0.20393 0.94135 0.7348 0.14536 0.76835&lt;/span&gt;
&lt;span class="c"&gt;## [25,] 0.8456175 0.08976 0.15553 0.13075 0.74546 0.6280 0.23254 0.62025&lt;/span&gt;
&lt;span class="c"&gt;##          [,9]   [,10]&lt;/span&gt;
&lt;span class="c"&gt;##  [1,] 0.30124 0.68865&lt;/span&gt;
&lt;span class="c"&gt;##  [2,] 0.67112 0.72139&lt;/span&gt;
&lt;span class="c"&gt;##  [3,] 0.56038 0.99757&lt;/span&gt;
&lt;span class="c"&gt;##  [4,] 0.23748 0.59152&lt;/span&gt;
&lt;span class="c"&gt;##  [5,] 0.07987 0.50159&lt;/span&gt;
&lt;span class="c"&gt;##  [6,] 0.63697 0.91020&lt;/span&gt;
&lt;span class="c"&gt;##  [7,] 0.71425 0.58123&lt;/span&gt;
&lt;span class="c"&gt;##  [8,] 0.07934 0.18153&lt;/span&gt;
&lt;span class="c"&gt;##  [9,] 0.91799 0.85539&lt;/span&gt;
&lt;span class="c"&gt;## [10,] 0.77144 0.37545&lt;/span&gt;
&lt;span class="c"&gt;## [11,] 0.43682 0.64109&lt;/span&gt;
&lt;span class="c"&gt;## [12,] 0.55022 0.43939&lt;/span&gt;
&lt;span class="c"&gt;## [13,] 0.74331 0.58395&lt;/span&gt;
&lt;span class="c"&gt;## [14,] 0.01913 0.72981&lt;/span&gt;
&lt;span class="c"&gt;## [15,] 0.20714 0.95380&lt;/span&gt;
&lt;span class="c"&gt;## [16,] 0.24238 0.55779&lt;/span&gt;
&lt;span class="c"&gt;## [17,] 0.16606 0.59220&lt;/span&gt;
&lt;span class="c"&gt;## [18,] 0.13465 0.03029&lt;/span&gt;
&lt;span class="c"&gt;## [19,] 0.74797 0.40250&lt;/span&gt;
&lt;span class="c"&gt;## [20,] 0.11388 0.11504&lt;/span&gt;
&lt;span class="c"&gt;## [21,] 0.04791 0.58220&lt;/span&gt;
&lt;span class="c"&gt;## [22,] 0.69066 0.83256&lt;/span&gt;
&lt;span class="c"&gt;## [23,] 0.00699 0.73928&lt;/span&gt;
&lt;span class="c"&gt;## [24,] 0.49927 0.18991&lt;/span&gt;
&lt;span class="c"&gt;## [25,] 0.91362 0.01659&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary></entry><entry><title>Reading 4</title><link href="http://www.jarrodmillman.com/stat133-summer2014/reading04.html" rel="alternate"></link><updated>2014-06-23T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-23:reading04.html</id><summary type="html">&lt;p&gt;Please watch the following videos by the beginning of class on Friday,
June 27th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keith Baggerly's &lt;a href="https://www.youtube.com/watch?v=lrm8iEMQZNw"&gt;talk&lt;/a&gt; at the
  The Brad Efron Honorary Symposium on LARGE-SCALE INFERENCE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;60 minutes' &lt;a href="http://www.cbsnews.com/news/deception-at-duke-fraud-in-cancer-care/"&gt;Deception at Duke: Fraud in cancer
  care?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Reading 3</title><link href="http://www.jarrodmillman.com/stat133-summer2014/reading03.html" rel="alternate"></link><updated>2014-06-20T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-20:reading03.html</id><summary type="html">&lt;p&gt;Please read sections 1 through 3 of this article prior to class on Monday, June 20th:&lt;/p&gt;
&lt;p&gt;J. B. Buckheit and D. L. Donoho,
&lt;a href="http://www-stat.stanford.edu/~wavelab/Wavelab_850/wavelab.pdf"&gt;Wavelab and Reproducible Research&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Git practice</title><link href="http://www.jarrodmillman.com/stat133-summer2014/gitpractice.html" rel="alternate"></link><updated>2014-06-18T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-18:gitpractice.html</id><summary type="html">&lt;p&gt;Today you will be practicing working with Git.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new Git repository using &lt;code&gt;git init&lt;/code&gt; and then adding GitHub as
   a remote or using GitHub to initialize a new repository and then cloning
   it.&lt;/li&gt;
&lt;li&gt;Create several text files with whatever text you wish and add/commit
   them to your local repository.&lt;/li&gt;
&lt;li&gt;Rename (i.e., move) some of the files and delete others.  Make
   sure to commit your changes to the local repository.&lt;/li&gt;
&lt;li&gt;Review the Git log of commits to verify your changes have been recorded.&lt;/li&gt;
&lt;li&gt;Push the changes to your local repository to the remote repository on 
   GitHub.&lt;/li&gt;
&lt;li&gt;Edit your files by adding and removing text.  Make sure to commit your
   changes to your local repository and push those changes to your
   remote repository.&lt;/li&gt;
&lt;li&gt;Delete your local repository.&lt;/li&gt;
&lt;li&gt;Clone it again and verify that you haven't lost anything.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should be able to use the &lt;code&gt;edit&lt;/code&gt; command for the Bash terminal to
edit your text files with your selected text editor.  You may wish to
review the &lt;a href="http://www.jarrodmillman.com/stat133-summer2014/lecture/lecture07.pdf"&gt;Git lecture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should not create your Git repository inside another Git repository.&lt;/p&gt;</summary></entry><entry><title>Section Notes - 3</title><link href="http://www.jarrodmillman.com/stat133-summer2014/notes3.html" rel="alternate"></link><updated>2014-06-17T00:00:00-07:00</updated><author><name>Karl Kumbier</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-17:notes3.html</id><summary type="html">&lt;h1&gt;Functions and Unit Testing&lt;/h1&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;Functions are an important tool for interacting with data in R. You're probably
already familiar with the idea of functions from math classes. In R, we use
functions to manipulate some input argument(s) and return some output
arguments(s). You've already seen some examples of built in R functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Take the mean of &amp;lt;numeric.vector&amp;gt;&lt;/span&gt;
numeric.vector &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
mean&lt;span class="p"&gt;(&lt;/span&gt;numeric.vector&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 5.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Generate 10 standard normal random variables&lt;/span&gt;
rnorm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##  [1]  1.8051 -1.3698  0.2661  0.4697  1.0124  1.5709  0.4211  0.8027&lt;/span&gt;
&lt;span class="c"&gt;##  [9]  0.2071  0.9277&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;R also allows you to define your own functions. The implementation of a generic
function is shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;someFunction &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;arg1&lt;span class="p"&gt;,&lt;/span&gt; arg2&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;# statement &lt;/span&gt;
    &lt;span class="c1"&gt;# return(object)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following code (when the statement and return values are not commented out)
would store a function called "someFunction" in your workspace. When called,
someFunction would perform the computations indicated by "statement" (presumably
on the values supplied by &lt;strong&gt;arg1&lt;/strong&gt;, &lt;strong&gt;arg2&lt;/strong&gt;, ...) and return the value
&lt;strong&gt;object&lt;/strong&gt; (presumably a result of the computations in "statement"). It is
important to note that &lt;em&gt;implementing&lt;/em&gt; a function is different than &lt;em&gt;calling&lt;/em&gt; the
function. When we &lt;em&gt;implement&lt;/em&gt; a function, it is stored in your workspace for
later use.  When we &lt;em&gt;call&lt;/em&gt; a function, we are telling R to use the stored function to actually perform the calculations associated with it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Here, we are implementing the function &amp;#39;add&amp;#39;. This function takes two&lt;/span&gt;
&lt;span class="c1"&gt;# arguments and returns their sum.&lt;/span&gt;
add &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    result &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; y
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;result&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Here, we are calling the function with different arguments&lt;/span&gt;
add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Something that is important to note with R is that functions can only return
&lt;em&gt;one&lt;/em&gt; result. If we want to write a function that returns multiple values, we
can get around this by having the function return a vector or list (depending on
whether the return values are the same type). Suppose we wanted to write a
function that returned both the sum and difference of its two arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# This function will throw an error when it is called when it tries to&lt;/span&gt;
&lt;span class="c1"&gt;# return multiple results&lt;/span&gt;
sumDiff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    result.sum &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; y
    result.diff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;-&lt;/span&gt; y
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;result.sum&lt;span class="p"&gt;,&lt;/span&gt; result.diff&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

sumDiff&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Error: multi-argument returns are not permitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Either of these functions will work since we combine the two return values&lt;/span&gt;
&lt;span class="c1"&gt;# into one argument&lt;/span&gt;
sumDiff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    result.sum &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; y
    result.diff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;-&lt;/span&gt; y
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;result.sum&lt;span class="p"&gt;,&lt;/span&gt; result.diff&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

sumDiff&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 6 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;sumDiff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    result.sum &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;+&lt;/span&gt; y
    result.diff &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x &lt;span class="o"&gt;-&lt;/span&gt; y
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;s &lt;span class="o"&gt;=&lt;/span&gt; result.sum&lt;span class="p"&gt;,&lt;/span&gt; d &lt;span class="o"&gt;=&lt;/span&gt; result.diff&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

sumDiff&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## $s&lt;/span&gt;
&lt;span class="c"&gt;## [1] 6&lt;/span&gt;
&lt;span class="c"&gt;## &lt;/span&gt;
&lt;span class="c"&gt;## $d&lt;/span&gt;
&lt;span class="c"&gt;## [1] 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A brief mention of scoping&lt;/h3&gt;
&lt;p&gt;When you start to define functions, you'll need to think about what variables different parts of the program have access. This idea is known as &lt;em&gt;scoping&lt;/em&gt;. R uses &lt;em&gt;lexical scoping&lt;/em&gt; which means that functions access variables relative to where they are defined (as opposed to where they are called). The basic idea is that when you use a variable in the body of a function, R will first look to see if that variable is defined in the body. If it isn't, R will move to the environment in which the function was defined (i.e. your workspace or the body of another function). As with many things in R, an example should make this a bit more clear.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bob.age &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
jane.age &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
getAge &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;person&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;person &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bob.age&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;person &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;jane.age&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

getNewAge &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;person&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    bob.age &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;
    jane.age &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;
    getAge&lt;span class="p"&gt;(&lt;/span&gt;person&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

getNewAge&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;getNewAge&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Jane&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The definition of "getAge" requires the variables &lt;strong&gt;bob.age&lt;/strong&gt; and &lt;strong&gt;jane.age&lt;/strong&gt;. Since they are not defined in the body of the function, R looks up one level and finds them defined in the workspace. Whenever we call the function "getAge", these variables in the workspace are tied to the values that "getAge" returns. Even if we redefine the variables &lt;strong&gt;bob.age&lt;/strong&gt; and &lt;strong&gt;jane.age&lt;/strong&gt; in a new environment (the body of "getNewAge"), "getAge" will still access the variables from the workspace because of where it was defined.&lt;/p&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;When you learned basic algebra, you were probably told to check your answer by
plugging your result back into the equation. This is an easy test to make sure
you performed the correct calculations. As you start to build larger projects in
R (or any language for that matter), it becomes increasingly important to check
that your code is performing correctly along the way. Unit testing packages in R
provide the framework to test your code in this way. We're going to cover the
"RUnit" package, but there are other unit testing packages that work
well. First, you'll have to install the package using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RUnit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you install a package, make sure the name is in quotes. Otherwise R
will think you're referring to some variable in the workspace. You should get a
prompt telling you to select a CRAN Mirror, choose CA1. After the package is
installed, you'll need to load it using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RUnit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! You can now use all of the functions supplied in the RUnit
package. You will have to load the package (using "library") every time you
start a new R session, but you don't have to install it again. The most
important functions for you to know in this package are the check functions:
"checkEquals", "checkEqualsNumeric", "checkIdentical", "checkTrue",
"checkException".  These functions are used to compare the output of your
functions with some expected output (target value, logical, or exception).&lt;/p&gt;
&lt;p&gt;If our function returns some numeric value, we can use "checkEquals" to compare
the output of our function with the desired value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;checkEquals&lt;span class="p"&gt;(&lt;/span&gt;add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;checkEquals&lt;span class="p"&gt;(&lt;/span&gt;add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Error: Mean relative difference: 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If our function returns a logical, we can check to see whether it returns TRUE
when we expect it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;isPositive &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

checkTrue&lt;span class="p"&gt;(&lt;/span&gt;isPositive&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;checkTrue&lt;span class="p"&gt;(&lt;/span&gt;isPositive&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Error: Test not TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice that R throws an error when the check statements don't evaluate to
TRUE. Normally, you would write your tests in such a way that the statements
evaluate to TRUE if your function performs as you expect it to. Thus,
an error in the test for some specific function would indicate that it is not doing what
you expect. Often times, you'll want to use multiple tests for each function to
check the range of input/output values you expect to use/see. However, if one of
the tests throws an error, our program will stop running and the remaining tests
will fail to evaluate. To prevent this, we'll use a "tryCatch"
statement. Essentially, R will try to evaluate some statement and then perform a
specified action if an error is thrown. We'll write a function "divide" to show
this in action. We would like "divide" to perform standard division in R, but
when dividing by 0 it should return NA instead of Inf.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# This is an incorrect version of the function. It will throw an error when&lt;/span&gt;
&lt;span class="c1"&gt;# we try to run our unit tests on it&lt;/span&gt;

divide &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;numerator&lt;span class="p"&gt;,&lt;/span&gt; denominator&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;numerator&lt;span class="o"&gt;/&lt;/span&gt;denominator&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

tryCatch&lt;span class="p"&gt;(&lt;/span&gt;checkIdentical&lt;span class="p"&gt;(&lt;/span&gt;divide&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;err&lt;span class="p"&gt;)&lt;/span&gt; print&lt;span class="p"&gt;(&lt;/span&gt;paste&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    err&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;Error: Error in checkIdentical(divide(1, 0), NA): FALSE \n&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;tryCatch&lt;span class="p"&gt;(&lt;/span&gt;checkEquals&lt;span class="p"&gt;(&lt;/span&gt;divide&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; error &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;err&lt;span class="p"&gt;)&lt;/span&gt; print&lt;span class="p"&gt;(&lt;/span&gt;paste&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    err&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we ran this code without "tryCatch", R would throw an error after the first
test and stop running. As a result, our second test wouldn't get
evaluated. This means we wouldn't be able to tell if there was a problem with
our entire function or just a small part. With "tryCatch" we can test different
evaluations of our function all at once, which helps
isolate why the function is failing. After seeing the output in the example
above, it would be clear that our function is dividing properly but not dealing
with the divide by 0 case like we expect it to.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary></entry><entry><title>Announcement (git workflow)</title><link href="http://www.jarrodmillman.com/stat133-summer2014/workflow.html" rel="alternate"></link><updated>2014-06-17T00:00:00-07:00</updated><author><name>Karl Kumbier</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-17:workflow.html</id><summary type="html">&lt;p&gt;Here's a short summary of the basic workflow that we covered today. We'll be
using it for homeworks, quizzez, etc. so it should start to come more naturally.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to your stat133 directory (in Bash)&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;git pull&lt;/code&gt; command (in Bash)&lt;/li&gt;
&lt;li&gt;Make changes to the files (in your text editor)&lt;/li&gt;
&lt;li&gt;Save the changes you made (in your text editor)&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; command (in Bash)&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;git commit -m "put some informative message here"&lt;/code&gt; command (in
Bash)&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;git push&lt;/code&gt; command (in Bash)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At various points throughout the process, you may be prompted for you GitHub
username and password. You can also use the &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt;
commands (in Bash) to get more information about changes you have made.&lt;/p&gt;</summary></entry><entry><title>Reading 2</title><link href="http://www.jarrodmillman.com/stat133-summer2014/reading02.html" rel="alternate"></link><updated>2014-06-16T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-16:reading02.html</id><summary type="html">&lt;p&gt;Please read this prior to class on Tuesday, June 17th:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Daniel Lemire's &lt;a href="http://lemire.me/blog/archives/2014/05/23/you-shouldnt-use-a-spreadsheet-for-important-work-i-mean-it/"&gt;You shouldn’t use a spreadsheet for important work (I mean
it)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nate Silver's &lt;a href="http://fivethirtyeight.com/features/be-skeptical-of-both-piketty-and-his-skeptics/"&gt;Be Skeptical of Both Piketty And His
Skeptics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are interested, I also recommend this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;James Kwak's &lt;a href="http://baselinescenario.com/2013/04/18/more-bad-excel/"&gt;More bad excel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Lab 2</title><link href="http://www.jarrodmillman.com/stat133-summer2014/lab02.html" rel="alternate"></link><updated>2014-06-12T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-12:lab02.html</id><summary type="html">&lt;p&gt;In this lab, you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a private homework repository on Github&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;info.R&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Github educational account&lt;/li&gt;
&lt;li&gt;If you are using your own laptop, please install relevant &lt;a href="pages/software"&gt;software&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setup &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You will be using &lt;code&gt;git&lt;/code&gt; to submit &lt;strong&gt;every lab assignment for grading&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; is an extremely powerful version control system widely used in the
open source scientific computing community.  Rather than trying to learn
everything that you can about &lt;code&gt;git&lt;/code&gt; right away, you will only be learning
the things you need to immediately use.  Over the next several weeks, you
will incrementally learn how to use more of its features.&lt;/p&gt;
&lt;p&gt;Entering &lt;code&gt;git&lt;/code&gt; at a shell prompt, will produce output something like
this (try this on your own computer):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git
usage: git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;

The most commonly used git commands are:
   add        Add file contents to the index
   config     Get and &lt;span class="nb"&gt;set &lt;/span&gt;repository or global options
   clone      Clone a repository into a new directory   
   commit     Record changes to the repository
   log        Show commit logs
   push       Update remote refs along with associated objects
   status     Show the working tree status

&lt;span class="s1"&gt;&amp;#39;git help -a&amp;#39;&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;git help -g&amp;#39;&lt;/span&gt; lists available subcommands and some
concept guides. See &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;&lt;/span&gt;
to &lt;span class="nb"&gt;read &lt;/span&gt;about a specific subcommand or concept.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you try this on your computer, you will see much more information.
I've reduced the output so that it only contains information relevant
for today's lab.&lt;/p&gt;
&lt;p&gt;The first thing you need to do is configure &lt;code&gt;git&lt;/code&gt;.  Here is what
I did on my machine, you should use your own name and email address!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;Karl Kumbier&amp;quot;&lt;/span&gt;
git config --global user.email &lt;span class="s2"&gt;&amp;quot;kkumbier@berkeley.edu&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create a private homework repository on Github&lt;/h2&gt;
&lt;p&gt;Make sure you are logged onto Github.  In your user bar at the top right
of any Github page, click the &lt;a href="https://github.com/new"&gt;"Create a New Repo"&lt;/a&gt;
button:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create New Repo" src="http://www.jarrodmillman.com/stat133-summer2014/images/github_create_new_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;This will take you to a new page where you will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Name your repository "stat133"&lt;/li&gt;
&lt;li&gt;Make sure it is private&lt;/li&gt;
&lt;li&gt;Select "Initialize this repository with a README"&lt;/li&gt;
&lt;li&gt;Choose "R" in the pull-down menu to add a .gitignore file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your screen should look like this (except &lt;code&gt;karlkumbier&lt;/code&gt; will
be replaced by your Github name):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create New Github Repo" src="http://www.jarrodmillman.com/stat133-summer2014/images/github_new_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once you click the "Create repository" button, you should see a
page like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Your New Repo" src="http://www.jarrodmillman.com/stat133-summer2014/images/github_s133_repo.png" /&gt;&lt;/p&gt;
&lt;p&gt;In order for me to see (and grade) your private repository, you will
need to add me as a colloborator.  In the lower right-hand corner of
your repositories main page, you should see a button labelled
"Settings".  Click on the "Settings" button will take you to
a page where you can edit various settings for your repository.
Choose the "Collaborators" button on the "Settings" page and
add me, &lt;code&gt;karlkumbier&lt;/code&gt;, as well as the instructor, &lt;code&gt;jarrodmillman&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github Add Collaborator" src="http://www.jarrodmillman.com/stat133-summer2014/images/github_add_collab.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Clone repository to your local machine&lt;/h3&gt;
&lt;p&gt;First you will create a &lt;code&gt;src&lt;/code&gt; subdirectory in your home directory.
Then you will clone your repo inside of the &lt;code&gt;src&lt;/code&gt; subdirectory.
Please make sure to use your own Github username instead of mine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;            &lt;span class="c"&gt;# go to your home directory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir src     &lt;span class="c"&gt;# make a source subdirectory&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;src
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/karlkumbier/stat133.git
Cloning into &lt;span class="s1"&gt;&amp;#39;stat133&amp;#39;&lt;/span&gt;...
Username &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;: karlkumbier
Password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://karlkumbier@github.com&amp;#39;&lt;/span&gt;: 
remote: Counting objects: 4, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total 4 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;, reused 0 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
Unpacking objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;4/4&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Checking connectivity... &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now take a look at what is inside your repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stat133/
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
README.md
&lt;span class="nv"&gt;$ &lt;/span&gt;ls -a
.  ..  .git  .gitignore  README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Create an &lt;code&gt;info.R&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;Now that you have a local copy of your repo, you will need to add
some new content.&lt;/p&gt;
&lt;p&gt;First, make sure you are in the top-level directory of your newly
cloned repository (note: you will be in the correct location if
you haven't changed directories since entering the above commands):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you aren't in the correct directory, you need to change your working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src/stat133
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open your text editor and create a new file, called &lt;code&gt;info.R&lt;/code&gt;.  Now
add the following content (replacing the values I've set with your own):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Karl Kumbier&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name@berkeley.edu&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;github_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;karlkumbier&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;enrolled&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: &lt;code&gt;status&lt;/code&gt; in ('enrolled', 'audit')&lt;/p&gt;
&lt;p&gt;Next you will query the status of your &lt;code&gt;git&lt;/code&gt; repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status 
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

Untracked files:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to include in what will be committed&lt;span class="o"&gt;)&lt;/span&gt;

        info.R

nothing added to commit but untracked files present &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git add&amp;quot;&lt;/span&gt; to track&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you should see, &lt;code&gt;git&lt;/code&gt; tells you that there is a new file that is not
being tracked.  Following the advice, try adding your new file to the repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add info.R 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now check on the status of your repo again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status 
On branch master
Your branch is up-to-date with &lt;span class="s1"&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.

Changes to be committed:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;&amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class="o"&gt;)&lt;/span&gt;

        new file:   info.R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything looks good, so go ahead and commit your change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Add personal info&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;master bbc329f&lt;span class="o"&gt;]&lt;/span&gt; Add personal info
 1 file changed, 4 insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode 100644 info.R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next take a look at a log of what's been done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log 
commit bbc329fe5f0672582a3ad3c70f5b86f4acc15f63
Author: Karl Kumbier &amp;lt;kkumbier@berkeley.edu&amp;gt;
Date:   Wed Jan 29 14:19:38 2014 -0800

    Add personal info

commit dead6f41c65e50f444760653205e21083caabfcc
Author: Karl Kumbier &amp;lt;kkumbier@berkeley.edu&amp;gt;
Date:   Tue Jan 28 22:29:33 2014 -0800

    Initial commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point you've created a new file, added it to your
repo, and committed the current state of your repo.  This
was all done locally, so the next thing to do is push these
changes back up to your remote Github repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push 
Username &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com&amp;#39;&lt;/span&gt;: karlkumbier
Password &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://karlkumbier@github.com&amp;#39;&lt;/span&gt;: 
Counting objects: 4, &lt;span class="k"&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;3/3&lt;span class="o"&gt;)&lt;/span&gt;, 359 bytes | 0 bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Total 3 &lt;span class="o"&gt;(&lt;/span&gt;delta 1&lt;span class="o"&gt;)&lt;/span&gt;, reused 0 &lt;span class="o"&gt;(&lt;/span&gt;delta 0&lt;span class="o"&gt;)&lt;/span&gt;
To https://github.com/karlkumbier/stat133
   dead6f4..bbc329f  master -&amp;gt; master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, your Github repository main page should look
something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Your New Repo" src="http://www.jarrodmillman.com/stat133-summer2014/images/github_s133_repo_2ndcommit.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note that there is now a new file and the number of commits has
been incremented to 2.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary></entry><entry><title>Section Notes - 2</title><link href="http://www.jarrodmillman.com/stat133-summer2014/notes2.html" rel="alternate"></link><updated>2014-06-12T00:00:00-07:00</updated><author><name>Karl Kumbier</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-12:notes2.html</id><summary type="html">&lt;h1&gt;R Basics&lt;/h1&gt;
&lt;h2&gt;Vectors&lt;/h2&gt;
&lt;h3&gt;Commonly used functions&lt;/h3&gt;
&lt;p&gt;Data in R is stored in vectors.  These are essentially an ordered container for
objects of the &lt;strong&gt;same type&lt;/strong&gt; (i.e. numeric, character, logical). We can create a
vector with "c(...)". Here are some examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
character.vector &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;e f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TRUE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
logical.vector &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few basic functions that can give us important information about the
vectors you're working with.&lt;/p&gt;
&lt;p&gt;The "class" function tells us what type of data is stored in the vector &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;class&lt;span class="p"&gt;(&lt;/span&gt;numeric.vector&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;numeric&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "length" function tells us how many observations
are in the vector &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;length&lt;span class="p"&gt;(&lt;/span&gt;numeric.vector&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "str" function gives us information about both the type of object stored by
the vector as well as the number of observations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;str&lt;span class="p"&gt;(&lt;/span&gt;numeric.vector&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##  num [1:5] 1 2 3 4 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When performing exploratory data analysis, it is often sufficient to use "str"
in place of the other functions. However, a function like "length" can be useful
if we need to set a variable that refers to the number of observations in our
dataset.&lt;/p&gt;
&lt;h3&gt;Vector operations&lt;/h3&gt;
&lt;p&gt;Since vectors are the basic units in R, performing operation with them works
quite smoothly. However, we need to be careful about how R tries to interpret
certain cases. Performing any of the basic operations with two numeric vectors
of the same length is done element wise. Here are some examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector.b &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
numeric.vector &lt;span class="o"&gt;+&lt;/span&gt; numeric.vector.b
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  6  8 10 12 14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector &lt;span class="o"&gt;-&lt;/span&gt; numeric.vector.b
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] -4 -4 -4 -4 -4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector &lt;span class="o"&gt;*&lt;/span&gt; numeric.vector.b
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  5 12 21 32 45&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector&lt;span class="o"&gt;/&lt;/span&gt;numeric.vector.b
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 0.2000 0.3333 0.4286 0.5000 0.5556&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also multiply by a scalar or add a constant by performing the "*" or "+"
operations using a vector of any length along with a vector of length 1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; numeric.vector
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  2  4  6  8 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; numeric.vector
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  6  7  8  9 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beyond these operations, things start to get sticky.  When we try to perform any
of the operations using vectors of different lengths, R will do so without
throwing a warning provided the larger vector is a multiple of the smaller. This
&lt;strong&gt;should be avoided&lt;/strong&gt; since it is confusing for other programers and possibly
even future you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vector.a &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
vector.b &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
vector.c &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# R will happily perform this computations, but is should be avoided&lt;/span&gt;
vector.b &lt;span class="o"&gt;-&lt;/span&gt; vector.a
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 0 0 2 2 4 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# R will happily perform this computations, but is should be avoided&lt;/span&gt;
vector.b &lt;span class="o"&gt;*&lt;/span&gt; vector.a
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  1  4  3  8  5 12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# R will warn you, but still perform the calculation&lt;/span&gt;
vector.c &lt;span class="o"&gt;+&lt;/span&gt; vector.a
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## Warning: longer object length is not a multiple of shorter object length&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 2 4 4 6 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;FInally, we note that many of the built in functions for R are performed element
wise on vectors.  For example, calling the function "sin" with the argument
numeric.vector will return a vector giving sin(x) for each entry in
numeric.vector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sin&lt;span class="p"&gt;(&lt;/span&gt;numeric.vector&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1]  0.8415  0.9093  0.1411 -0.7568 -0.9589&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Subsetting&lt;/h3&gt;
&lt;p&gt;We can access different elements of vectors using bracket notation
("&lt;strong&gt;vector&lt;/strong&gt;[...]").  R indexes vectors starting with 1, i.e. &lt;strong&gt;vector&lt;/strong&gt;[1]
returns the first element of &lt;strong&gt;vector&lt;/strong&gt;. For example, the fourth element of
numeric.vector and the second element of logical.vector are given by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;logical.vector&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] TRUE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can access multiple elements of a vector by using a numeric vector or logical
vector (indices that match the TRUE values get returned) inside the
brackets. For example, the second, fourth, and fifth elements of
character.vector:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;character.vector&lt;span class="p"&gt;[&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;b&amp;quot;   &amp;quot;e f&amp;quot; &amp;quot;123&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;character.vector&lt;span class="p"&gt;[&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k-Variable"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;b&amp;quot;   &amp;quot;e f&amp;quot; &amp;quot;123&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to be careful when subsetting using a logical vector. If the vector you
being used to subset the data is shorter than the data vector, R will try to be
smart and multiply the logical vector until it is the same length as the data
vector. This probably makes more sense through an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;subset.idcs &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k-Variable"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k-Variable"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
numeric.vector&lt;span class="p"&gt;[&lt;/span&gt;subset.idcs&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 1 3 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of throwing an error about the fact that subset.idcs and numeric.idcs
are different lengths, R duplicates the vector subset.idcs to be (T,F,T,F,T).
This is often confusing for other programers as well as yourself and &lt;strong&gt;should be
avoided&lt;/strong&gt;. Instead, you should use a logical vector that is equal in length to
the vector you are trying to subset. This practice is very handy for many data
analysis tasks.  For instance, if we wanted all the elements from numeric.vector
that are less than 3, we write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;numeric.vector&lt;span class="p"&gt;[&lt;/span&gt;numeric.vector &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 1 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Data Frames&lt;/h2&gt;
&lt;p&gt;A powerful object for analyzing data in R is the data frame. Data frames are
lists of vectors of equal length. While each vector contains elements of the
&lt;strong&gt;same type&lt;/strong&gt;, the vectors that make up a data frame may be &lt;strong&gt;different types&lt;/strong&gt;.
We'll be working with the "iris" dataset, which is built into R and stored as a
data frame.&lt;/p&gt;
&lt;h3&gt;Commonly used functions&lt;/h3&gt;
&lt;p&gt;Data frames have names for each of the vectors they contain (although the
default names may be generic eg.  X1, X2, ...).  We can look at the names using
the "names" function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;names&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot;  &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot; &lt;/span&gt;
&lt;span class="c"&gt;## [5] &amp;quot;Species&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "head" and "tail" functions display the first and last observations of the
data frame.  We can also specify how many observations to display (the default
is 6 observations).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;head&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class="c"&gt;## 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 2          4.9         3.0          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 3          4.7         3.2          1.3         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 4          4.6         3.1          1.5         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 5          5.0         3.6          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 6          5.4         3.9          1.7         0.4  setosa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;tail&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##     Sepal.Length Sepal.Width Petal.Length Petal.Width   Species&lt;/span&gt;
&lt;span class="c"&gt;## 145          6.7         3.3          5.7         2.5 virginica&lt;/span&gt;
&lt;span class="c"&gt;## 146          6.7         3.0          5.2         2.3 virginica&lt;/span&gt;
&lt;span class="c"&gt;## 147          6.3         2.5          5.0         1.9 virginica&lt;/span&gt;
&lt;span class="c"&gt;## 148          6.5         3.0          5.2         2.0 virginica&lt;/span&gt;
&lt;span class="c"&gt;## 149          6.2         3.4          5.4         2.3 virginica&lt;/span&gt;
&lt;span class="c"&gt;## 150          5.9         3.0          5.1         1.8 virginica&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;head&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;,&lt;/span&gt; n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#displays 10 observations&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class="c"&gt;## 1           5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 2           4.9         3.0          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 3           4.7         3.2          1.3         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 4           4.6         3.1          1.5         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 5           5.0         3.6          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 6           5.4         3.9          1.7         0.4  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 7           4.6         3.4          1.4         0.3  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 8           5.0         3.4          1.5         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 9           4.4         2.9          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 10          4.9         3.1          1.5         0.1  setosa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can use the "summary" function to get a better understanding of the
data. This function returns several summary statistics for each column of the
data frame.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;summary&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length   Sepal.Width    Petal.Length   Petal.Width &lt;/span&gt;
&lt;span class="c"&gt;##  Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1  &lt;/span&gt;
&lt;span class="c"&gt;##  1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3  &lt;/span&gt;
&lt;span class="c"&gt;##  Median :5.80   Median :3.00   Median :4.35   Median :1.3  &lt;/span&gt;
&lt;span class="c"&gt;##  Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2  &lt;/span&gt;
&lt;span class="c"&gt;##  3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8  &lt;/span&gt;
&lt;span class="c"&gt;##  Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5  &lt;/span&gt;
&lt;span class="c"&gt;##        Species  &lt;/span&gt;
&lt;span class="c"&gt;##  setosa    :50  &lt;/span&gt;
&lt;span class="c"&gt;##  versicolor:50  &lt;/span&gt;
&lt;span class="c"&gt;##  virginica :50  &lt;/span&gt;
&lt;span class="c"&gt;##                 &lt;/span&gt;
&lt;span class="c"&gt;##                 &lt;/span&gt;
&lt;span class="c"&gt;## &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we might be interested in the number of observations or variables in
the data frame. Typically, observations are stored as rows of a data frame while
variables correspond to columns.  the "nrow" and "ncol" functions give the
number of rows and columns respectively.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nrow&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 150&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;ncol&lt;span class="p"&gt;(&lt;/span&gt;iris&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Subsetting&lt;/h3&gt;
&lt;p&gt;Sometimes, we want to analyze a particular variable of our dataset. To do this,
we need to access a specific vector from our data frame. This is done with
&lt;strong&gt;data.frame&lt;/strong&gt;$&lt;strong&gt;variable.name&lt;/strong&gt;. For instance, the following is a vector of
sepal widths for all of the observations in the iris data frame.  As long as
&lt;strong&gt;variable.name&lt;/strong&gt; matches with one of the variables in names(&lt;strong&gt;data.frame&lt;/strong&gt;), R
will give us back the appropriate vector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sepal_widths &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; iris&lt;span class="o"&gt;$&lt;/span&gt;Sepal.Width
head&lt;span class="p"&gt;(&lt;/span&gt;sepal_widths&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 3.5 3.0 3.2 3.1 3.6 3.9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just as with vectors, we can access specific elements of sepal_widths using
"[...]".  For instance, the following examples return the sepal width of the
47th observation and the sepal widths for irises of species setosa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sepal_widths&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;47&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 3.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;sepal_widths&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Species &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setosa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##  [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9&lt;/span&gt;
&lt;span class="c"&gt;## [18] 3.5 3.8 3.8 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2&lt;/span&gt;
&lt;span class="c"&gt;## [35] 3.1 3.2 3.5 3.6 3.0 3.4 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we want to subset by observations and variables, we use &lt;strong&gt;data.frame&lt;/strong&gt;[...,
...]  where the values inseide the brackets are either single values or a vector
of values.  The first entry corresponds to the rows of &lt;strong&gt;data.frame&lt;/strong&gt; and the
second to the columns. Leaving either of these values blank will return all rows
(or columns). This is best seen through examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The first row and column of iris&lt;/span&gt;

iris&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## [1] 5.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The first row and all columns of iris&lt;/span&gt;

iris&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class="c"&gt;## 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Rows 2, 7, and 47; columns 1 and 4&lt;/span&gt;

iris&lt;span class="p"&gt;[&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;47&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##    Sepal.Length Petal.Width&lt;/span&gt;
&lt;span class="c"&gt;## 2           4.9         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 7           4.6         0.3&lt;/span&gt;
&lt;span class="c"&gt;## 47          5.1         0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# All iris observations of species setosa&lt;/span&gt;

iris_setosa &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Species &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setosa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
head&lt;span class="p"&gt;(&lt;/span&gt;iris_setosa&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class="c"&gt;## 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 2          4.9         3.0          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 3          4.7         3.2          1.3         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 4          4.6         3.1          1.5         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 5          5.0         3.6          1.4         0.2  setosa&lt;/span&gt;
&lt;span class="c"&gt;## 6          5.4         3.9          1.7         0.4  setosa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The first four columns (everything except Species) of iris for&lt;/span&gt;
&lt;span class="c1"&gt;# observations of species setosa&lt;/span&gt;

setosa_variables &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Species &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setosa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
head&lt;span class="p"&gt;(&lt;/span&gt;setosa_variables&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width&lt;/span&gt;
&lt;span class="c"&gt;## 1          5.1         3.5          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 2          4.9         3.0          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 3          4.7         3.2          1.3         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 4          4.6         3.1          1.5         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 5          5.0         3.6          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 6          5.4         3.9          1.7         0.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;setosa_variables &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Species &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setosa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
head&lt;span class="p"&gt;(&lt;/span&gt;setosa_variables&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width&lt;/span&gt;
&lt;span class="c"&gt;## 1          5.1         3.5          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 2          4.9         3.0          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 3          4.7         3.2          1.3         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 4          4.6         3.1          1.5         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 5          5.0         3.6          1.4         0.2&lt;/span&gt;
&lt;span class="c"&gt;## 6          5.4         3.9          1.7         0.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# All data for flowers with Sepal.Length less than 5&lt;/span&gt;
iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Sepal.Length &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species&lt;/span&gt;
&lt;span class="c"&gt;## 2            4.9         3.0          1.4         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 3            4.7         3.2          1.3         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 4            4.6         3.1          1.5         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 7            4.6         3.4          1.4         0.3     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 9            4.4         2.9          1.4         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 10           4.9         3.1          1.5         0.1     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 12           4.8         3.4          1.6         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 13           4.8         3.0          1.4         0.1     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 14           4.3         3.0          1.1         0.1     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 23           4.6         3.6          1.0         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 25           4.8         3.4          1.9         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 30           4.7         3.2          1.6         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 31           4.8         3.1          1.6         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 35           4.9         3.1          1.5         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 38           4.9         3.6          1.4         0.1     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 39           4.4         3.0          1.3         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 42           4.5         2.3          1.3         0.3     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 43           4.4         3.2          1.3         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 46           4.8         3.0          1.4         0.3     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 48           4.6         3.2          1.4         0.2     setosa&lt;/span&gt;
&lt;span class="c"&gt;## 58           4.9         2.4          3.3         1.0 versicolor&lt;/span&gt;
&lt;span class="c"&gt;## 107          4.9         2.5          4.5         1.7  virginica&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The Species of flowers with Sepal.Length less than 5&lt;/span&gt;
iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Sepal.Length &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##  [1] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;##  [7] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;## [13] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;## [19] setosa     setosa     versicolor virginica &lt;/span&gt;
&lt;span class="c"&gt;## Levels: setosa versicolor virginica&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;iris&lt;span class="p"&gt;[&lt;/span&gt;iris&lt;span class="o"&gt;$&lt;/span&gt;Sepal.Length &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;Species
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;##  [1] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;##  [7] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;## [13] setosa     setosa     setosa     setosa     setosa     setosa    &lt;/span&gt;
&lt;span class="c"&gt;## [19] setosa     setosa     versicolor virginica &lt;/span&gt;
&lt;span class="c"&gt;## Levels: setosa versicolor virginica&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary></entry><entry><title>Announcement (TextWrangler)</title><link href="http://www.jarrodmillman.com/stat133-summer2014/announcement01.html" rel="alternate"></link><updated>2014-06-10T00:00:00-07:00</updated><author><name>Karl Kumbier</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-10:announcement01.html</id><summary type="html">&lt;p&gt;For those of you who installed TextWrangler today, you should note that it does
not perform syntax highlighting for R. While this is not necessary to write
your programs, it makes the process much easier. &lt;a href="https://files.nyu.edu/jmb736/public/projects/R.html"&gt;This
site&lt;/a&gt; has information on
how to add a module that supports syntax highlighting in R. Just follow the
instructions under the Language Module part of the article. If you have any
issues let me know.&lt;/p&gt;</summary></entry><entry><title>Lab 1</title><link href="http://www.jarrodmillman.com/stat133-summer2014/lab01.html" rel="alternate"></link><updated>2014-06-10T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-10:lab01.html</id><summary type="html">&lt;p&gt;In the first lab, we will deal with installation issues.  You will &lt;strong&gt;need&lt;/strong&gt;
to bring your laptop to lab.  For installation instructions, please see the
&lt;a href="http://www.jarrodmillman.com/stat133-summer2014/pages/software.html"&gt;Software&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;During future lectures and labs, we will make heavy use of Git and GitHub.
Every student will need a Github student account for submitting their lab work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/join"&gt;Create account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edu"&gt;Request a student account&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Reading 1</title><link href="http://www.jarrodmillman.com/stat133-summer2014/reading01.html" rel="alternate"></link><updated>2014-06-09T00:00:00-07:00</updated><author><name>Jarrod Millman</name></author><id>tag:www.jarrodmillman.com/stat133-summer2014,2014-06-09:reading01.html</id><summary type="html">&lt;p&gt;Please read this prior to class on Tuesday, June 10th:&lt;/p&gt;
&lt;p&gt;L. Preeyanon, A. B. Pyrkosz, and C. T. Brown,
&lt;a href="https://osf.io/zqbu2/"&gt;Reproducible Bioinformatics Research for Biologists&lt;/a&gt;.
In V. Stodden, F. Leisch, and R. D. Peng, editors, &lt;a href="http://www.crcpress.com/product/isbn/9781466561595"&gt;Implementing Reproducible
Research&lt;/a&gt;. Chapman and Hall/CRC, 2014.&lt;/p&gt;</summary></entry></feed>